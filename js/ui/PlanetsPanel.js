export class PlanetsPanel {
    constructor(app) {
        this.app = app;
        this.panel = document.getElementById('planets-panel');
        this.planetsList = document.getElementById('planets-list');
        this.searchInput = document.getElementById('planet-search');
        this.selectedPlanet = null;
        this.planets = [];
        
        this.setupEventListeners();
    }
    
    setupEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
        const closeBtn = document.getElementById('close-planets');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.hide());
        }
        
        // –ü–æ–∏—Å–∫ –ø–ª–∞–Ω–µ—Ç
        if (this.searchInput) {
            this.searchInput.addEventListener('input', (e) => {
                this.filterPlanets(e.target.value);
            });
        }
        
        // –§–æ–∫—É—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞–Ω–µ—Ç–µ
        const focusBtn = document.getElementById('focus-selected-planet');
        if (focusBtn) {
            focusBtn.addEventListener('click', () => this.focusOnSelectedPlanet());
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
        const clearBtn = document.getElementById('clear-planet-selection');
        if (clearBtn) {
            clearBtn.addEventListener('click', () => this.clearSelection());
        }
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && !this.panel.classList.contains('hidden')) {
                this.hide();
            }
        });
    }
    
    show() {
        this.panel.classList.remove('hidden');
        this.loadPlanets();
    }
    
    hide() {
        this.panel.classList.add('hidden');
    }
    
    toggle() {
        if (this.panel.classList.contains('hidden')) {
            this.show();
        } else {
            this.hide();
        }
    }
    
    loadPlanets() {
        const currentScene = this.app.getCurrentScene();
        
        if (currentScene !== 'solar-system') {
            this.showEmptyState('–°–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
            return;
        }
        
        const solarScene = this.app.getSolarSystemScene();
        if (!solarScene || !solarScene.planets) {
            this.showEmptyState('–ü–ª–∞–Ω–µ—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–∞–Ω–µ—Ç (–±–µ–∑ —Å–ø—É—Ç–Ω–∏–∫–æ–≤)
        this.planets = solarScene.planets.filter(p => !p.userData.parent);
        
        if (this.planets.length === 0) {
            this.showEmptyState('–ü–ª–∞–Ω–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        this.renderPlanets(this.planets);
    }
    
    renderPlanets(planets) {
        this.planetsList.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        const counter = document.createElement('div');
        counter.className = 'planets-count';
        counter.textContent = `–ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–µ—Ç: ${planets.length}`;
        this.planetsList.appendChild(counter);
        
        planets.forEach(planet => {
            const planetItem = this.createPlanetItem(planet);
            this.planetsList.appendChild(planetItem);
        });
    }
    
    createPlanetItem(planet) {
        const item = document.createElement('div');
        item.className = 'planet-item';
        item.dataset.planetName = planet.userData.name;
        
        if (this.selectedPlanet === planet) {
            item.classList.add('selected');
        }
        
        // –ò–∫–æ–Ω–∫–∞ –ø–ª–∞–Ω–µ—Ç—ã
        const icon = document.createElement('div');
        icon.className = 'planet-icon';
        icon.innerHTML = this.getPlanetEmoji(planet.userData.name);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ—Ç–µ
        const info = document.createElement('div');
        info.className = 'planet-info';
        
        const name = document.createElement('div');
        name.className = 'planet-name';
        name.textContent = planet.userData.name;
        
        const details = document.createElement('div');
        details.className = 'planet-details';
        
        // –†–∞–¥–∏—É—Å
        if (planet.userData.originalData?.radius) {
            const radiusDetail = document.createElement('div');
            radiusDetail.className = 'planet-detail';
            radiusDetail.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 -960 960 960" width="16px" fill="currentColor">
                    <path d="M480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Z"/>
                </svg>
                <span>${Math.round(planet.userData.originalData.radius)} –∫–º</span>
            `;
            details.appendChild(radiusDetail);
        }
        
        // –û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        if (planet.userData.period) {
            const periodDetail = document.createElement('div');
            periodDetail.className = 'planet-detail';
            periodDetail.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 -960 960 960" width="16px" fill="currentColor">
                    <path d="m612-292 56-56-148-148v-184h-80v216l172 172ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Z"/>
                </svg>
                <span>${Math.round(planet.userData.period)} –¥–Ω–µ–π</span>
            `;
            details.appendChild(periodDetail);
        }
        
        info.appendChild(name);
        info.appendChild(details);
        
        // –ë–µ–π–¥–∂ —Ç–∏–ø–∞ –ø–ª–∞–Ω–µ—Ç—ã
        const badge = document.createElement('div');
        badge.className = `planet-badge ${this.getPlanetType(planet.userData.name)}`;
        badge.textContent = this.getPlanetTypeLabel(planet.userData.name);
        
        item.appendChild(icon);
        item.appendChild(info);
        item.appendChild(badge);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        item.addEventListener('click', () => this.selectPlanet(planet, item));
        
        return item;
    }
    
    selectPlanet(planet, itemElement) {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–ª–∞–Ω–µ—Ç—ã
        const prevSelected = this.planetsList.querySelector('.planet-item.selected');
        if (prevSelected) {
            prevSelected.classList.remove('selected');
        }
        
        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é –ø–ª–∞–Ω–µ—Ç—É
        itemElement.classList.add('selected');
        this.selectedPlanet = planet;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ
        const cameraController = this.app.getCameraController();
        if (cameraController) {
            cameraController.selectObject(planet);
        }
    }
    
    focusOnSelectedPlanet() {
        if (!this.selectedPlanet) {
            this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω–µ—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞');
            return;
        }
        
        const cameraController = this.app.getCameraController();
        if (cameraController) {
            cameraController.focusOnObject(this.selectedPlanet, 1500);
            this.showNotification(`–§–æ–∫—É—Å –Ω–∞ ${this.selectedPlanet.userData.name}`);
        }
    }
    
    clearSelection() {
        const selected = this.planetsList.querySelector('.planet-item.selected');
        if (selected) {
            selected.classList.remove('selected');
        }
        
        this.selectedPlanet = null;
        
        const cameraController = this.app.getCameraController();
        if (cameraController) {
            cameraController.selectObject(null);
        }
    }
    
    filterPlanets(query) {
        if (!query) {
            this.renderPlanets(this.planets);
            return;
        }
        
        const lowerQuery = query.toLowerCase();
        const filtered = this.planets.filter(p => 
            p.userData.name.toLowerCase().includes(lowerQuery)
        );
        
        if (filtered.length === 0) {
            this.showEmptyState(`–ü–ª–∞–Ω–µ—Ç—ã "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        } else {
            this.renderPlanets(filtered);
        }
    }
    
    showEmptyState(message) {
        this.planetsList.innerHTML = `
            <div class="planets-empty">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 -960 960 960" fill="currentColor">
                    <path d="M480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z"/>
                </svg>
                <p>${message}</p>
            </div>
        `;
    }
    
    showNotification(message) {
        const notification = document.createElement('div');
        notification.className = 'settings-notification';
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);
        
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 2000);
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getPlanetEmoji(name) {
        const emojis = {
            '–ú–µ—Ä–∫—É—Ä–∏–π': '‚òø',
            '–í–µ–Ω–µ—Ä–∞': '‚ôÄ',
            '–ó–µ–º–ª—è': 'üåç',
            '–ú–∞—Ä—Å': '‚ôÇ',
            '–Æ–ø–∏—Ç–µ—Ä': '‚ôÉ',
            '–°–∞—Ç—É—Ä–Ω': '‚ôÑ',
            '–£—Ä–∞–Ω': '‚ôÖ',
            '–ù–µ–ø—Ç—É–Ω': '‚ôÜ',
            '–ü–ª—É—Ç–æ–Ω': '‚ôá'
        };
        return emojis[name] || 'ü™ê';
    }
    
    getPlanetType(name) {
        const inner = ['Mercury', 'Venus', 'Earth', 'Mars'];
        const outer = ['Jupiter', 'Saturn', 'Uranus', 'Neptune'];
        const dwarf = ['Pluto'];
        
        if (inner.includes(name)) return 'inner';
        if (outer.includes(name)) return 'outer';
        if (dwarf.includes(name)) return 'dwarf';
        return '';
    }
    
    getPlanetTypeLabel(name) {
        const type = this.getPlanetType(name);
        const labels = {
            'inner': '–í–Ω—É—Ç—Ä.',
            'outer': '–í–Ω–µ—à–Ω.',
            'dwarf': '–ö–∞—Ä–ª–∏–∫'
        };
        return labels[type] || '–ü–ª–∞–Ω–µ—Ç–∞';
    }
}